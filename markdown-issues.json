{
  "timestamp": "2025-08-05T21:31:41.313Z",
  "crawled": 749,
  "errors": 2,
  "skipped": 0,
  "markdownIssues": [
    {
      "type": "tables",
      "description": "Unrendered table (pipe characters)",
      "count": 4,
      "samples": [
        "|&quot; character separates non-repeating and repeating arguments. Any arguments after &quot;|&quot; are repeatable arguments and you can specify them any number of times. However, the entire list of arguments <strong>must</strong> be present in any multiple argument operator (meaning, you can't specify just one of three arguments, you must include all three).</p>\n \n\n<table>\n<thead>\n<tr>\n<th><div class=\"big-column\">Operator</div></th>\n<th>Description</th>\n<th>Syntax</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>Evaluates each SourceDescription sequentially on the returned JsonElement. Equivalent to evaluating a specific path when chaining BasicPaths. This also works with indexing into an array, for example [&quot;path&quot;, &quot;foo&quot;, &quot;1&quot;] chooses the element at index 1 (second element) in the array at &quot;foo&quot;.<strong>The index must be provided as a string.</strong></td>\n<td>[&quot;path&quot;, \\</td>\n<td>SOURCE_DESCRIPTION...]<strong>Example</strong>: [&quot;path&quot;, &quot;foo&quot;, &quot;bar&quot;] =&gt; obj['foo']['bar'].</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns the first value returned by SOURCE_DESCRIPTION in the list.</td>\n<td>[&quot;any&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Escapes a single JSON value so you can create a static value.</td>\n<td><strong>Example</strong>: [&quot;value&quot;, &quot;amplitude-vacuum&quot;...</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Creates a dictionary (object) where the raw_strings are keys and values are the evaluated SOURCE_DESCRIPTIONS.</td>\n<td>[&quot;dict&quot;, &quot;raw_string&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>&quot;raw_string&quot;, SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns an array, where elements are the values returned by evaluating SOURCE_DESCRIPTIONS. If a SOURCE_DESCRIPTION fails to evaluate, it will be skipped</td>\n<td>[&quot;array&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Determines the first true BooleanCondition and returns the result of the following SOURCE_DESCRIPTION. Throws a NoValueFoundAtSource exception if nothing evaluates to true.</td>\n<td>[&quot;condition&quot;\\</td>\n<td>&quot;cond&quot;, BOOLEAN_SOURCE, SOURCE_DESCRIPTION, \\</td>\n<td>BOOLEAN_SOURCE, SOURCE_DESCRIPTION...]</td>\n</tr>\n<tr>\n<td></td>\n<td>If the BOOLEAN_SOURCE evaluates to true, returns the first SOURCE_DESCRIPTION. Otherwise returns the second SOURCE_DESCRIPTION.</td>\n<td>[&quot;ifelse&quot;, BOOLEAN_SOURCE, SOURCE_DESCRIPTION, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Evaluates the given sampleKey (second arg) with the samplePercent (first arg) to determine whether it should be in the sample. Returns boolean</td>\n<td>[&quot;sample_md5&quot;, SOURCE_DESCRIPTION, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the string returned by SOURCE_DESCRIPTION is an ISO datetime string, for example, , and converts to milliseconds since epoch</td>\n<td>[&quot;iso_time_to_ms&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the string returned by SOURCE_DESCRIPTION is milliseconds since epoch and converts to ISO datetime string, for example, </td>\n<td>[&quot;ms_to_iso_time&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Generates an ISO datetime string for right now</td>\n<td>[&quot;iso_time_now&quot;]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Generates the milliseconds since epoch for right now</td>\n<td>[&quot;ms_time_now&quot;]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the string returned by SOURCE_DESCRIPTION is a base64-encoded INT96, for example, , and converts to milliseconds since epoch</td>\n<td>[&quot;int96_time_to_ms&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Takes in a RAW_STRING time format, for example, , and a  that returns a string in that format, for example, '1/1/2021 5:06:07', and converts to milliseconds since epoch</td>\n<td>[&quot;parse_time_to_ms&quot;, RAW_STRING, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the value returned by SOURCE_DESCRIPTION is a string json blob and returns the parsed json value</td>\n<td>[&quot;parse_json_element&quot;\\</td>\n<td>&quot;parse_json_object&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Merges the json objects that each SOURCE_DESCRIPTION evaluates to</td>\n<td>[&quot;merge_dicts&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Flattens a nested json object into a single layer json object</td>\n<td>[&quot;flatten_dict&quot;, &quot;raw_string&quot;, INTEGER_SOURCE, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Evaluates the specified SourceDescription the returned JsonElement without the requested fields</td>\n<td>[&quot;exclude_keys&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>&quot;raw_string&quot;...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Treats the results of each SOURCE_DESCRIPTION as a string and returns the concatenated string</td>\n<td>[&quot;concat&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Replace all old_string within the value returned by SOURCE_DESCRIPTION with new_string. Returns a string or raises a NoValueException if SOURCE_DESCRIPTION can't be evaluated to a string. The old_string supports Java's regex syntax for matching patterns, more details at https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html</td>\n<td>[&quot;replace_with&quot;, &quot;old_string&quot;, &quot;new_string&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Splits the value returned by SOURCE_DESCRIPTION by the specified character sequence. Returns a jsonArray or raises a NoValueException if SOURCE_DESCRIPTION can't be evaluated to a string</td>\n<td>[&quot;split&quot;, &quot;raw_string&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns the lowercase string</td>\n<td>[&quot;lowercase&quot;\\</td>\n<td>&quot;lower&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns type of the source description as a string: 'string', 'list', 'dict', 'bool', 'number', 'null'</td>\n<td>[&quot;typeof&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"boolean-operators\">Boolean operators<a href=\"#boolean-operators\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h3>\n<p>These operators return a JsonPrimitive of type Boolean, so they're valid to use with  and .</p>\n \n\n<table>\n<thead>\n<tr>\n<th><strong>Operator</strong></th>\n<th><strong>Description</strong></th>\n<th><strong>Source</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>Evaluates as a static boolean value. Throws an exception during initialization if RAW_JSON isn't a boolean value.</td>\n<td>[&quot;bool&quot;, any_json]</td>\n</tr>\n<tr>\n<td></td>\n<td>Return whether both arguments are true. Null values are treated as false, string 'true' or 'false' is cast to a boolean.</td>\n<td>[&quot;not&quot;|",
        "|&quot;&amp;&amp;&quot;, SOURCE_DESCRIPTION, | SOURCE_DESCRIPTION...]</td>\n</tr>\n<tr>\n<td></td>\n<td>Return whether at least one argument is true. Null values are treated as false, string 'true' or 'false' is cast to a boolean.</td>\n<td>[&quot;or&quot;|",
        "||&quot;, SOURCE_DESCRIPTION, |"
      ],
      "url": "https://amplitude.com/docs/data/converter-configuration-reference"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* <strong>E</strong> *"
      ],
      "url": "https://amplitude.com/docs/web-experiment/tracking"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* (75th percentile - 25th percentile)</li>\n<li>Lower Bound: 25th percentile - 1.5 *"
      ],
      "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/find-and-resolve-outliers-in-your-data"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* 0.95 = 0.9025 (90.25%)</p>\n<p>Instead of adding an experiment to multiple holdout groups, create a single group with all the relevant experiments instead. This will allow for a more even distribution of traffic across experiments. </p>\n<p>In the example above, you would create just <strong>one</strong> holdout group containing all three experiments (A, B, and C).</p>\n<h2 id=\"case-2-handle-experiments-with-holdout-groups-and-mutual-exclusion\">Case 2: Handle experiments with holdout groups and mutual exclusion<a href=\"#case-2-handle-experiments-with-holdout-groups-and-mutual-exclusion\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h2>\n<p>Adding an experiment to a holdout group <strong>and</strong> a mutual exclusion group can also further limit the amount of traffic to the experiment. Each user will be evaluated for both the holdout group <strong>and</strong> the mutual exclusion group.</p>\n<p>For example, imagine the following holdout group and mutual exclusion group: </p>\n<ul>\n<li><strong>The holdout group</strong> has a holdout percentage of 5% and contains <strong>experiment A</strong>.</li>\n<li><strong>The mutual exclusion group</strong> has half the traffic directed to <strong>experiment A in slot 1</strong>, with the other half going to <strong>experiment B in slot 2</strong>.</li>\n</ul>\n<p>In this scenario, experiment A receives about half of the total traffic:</p>\n<p>0.95 *"
      ],
      "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/holdout-groups-advanced-use-cases"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* 0.95 = 0.9025 (90.25%)</p>\n<p>Instead of adding an experiment to multiple holdout groups, create a single group with all the relevant experiments instead. This allows for a more even distribution of traffic across experiments. </p>\n<p>In the example above, you would create just <strong>one</strong> holdout group containing all three experiments (A, B, and C).</p>\n<h3 id=\"handle-experiments-with-holdout-groups-and-mutual-exclusion\">Handle experiments with holdout groups and mutual exclusion<a href=\"#handle-experiments-with-holdout-groups-and-mutual-exclusion\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h3>\n<p>Adding an experiment to a holdout group <strong>and</strong> a mutual exclusion group can also further limit the amount of traffic to the experiment. Experiment evaluates each user for both the holdout group <strong>and</strong> the mutual exclusion group.</p>\n<p>For example, imagine the following holdout group and mutual exclusion group: </p>\n<ul>\n<li><strong>The holdout group</strong> has a holdout percentage of 5% and contains <strong>experiment A</strong>.</li>\n<li><strong>The mutual exclusion group</strong> has half the traffic directed to <strong>experiment A in slot 1</strong>, with the other half  to <strong>experiment B in slot 2</strong>.</li>\n</ul>\n<p>In this scenario, experiment A receives about half of the total traffic:</p>\n<p>0.95 *"
      ],
      "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/holdout-groups-exclude-users"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* 0.5 = 0.25, or 25% of the total traffic.</p>\n<p>Instead of adding an experiment to multiple mutual exclusion groups, create a group that includes all the relevant experiments instead; here, that group would contain experiments A, B, and C.</p>\n<ul>\n<li>Adding an experiment to a holdout group <strong>and</strong> a mutual exclusion group will further limit the amount of traffic to the experiment, as each user will be evaluated for both groups.</li>\n</ul>\n<p>For example, consider the following holdout group and mutual exclusion group: </p>\n<ul>\n<li>The holdout group contains experiment A, with a holdout percentage of 5%</li>\n<li>The mutual exclusion group contains experiment A in slot 1 and experiment B in slot 2, where each experiment receives 50% of the traffic</li>\n</ul>\n<p>In this case, experiment A will receive 0.95 *"
      ],
      "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/mutually-exclusive-experiments"
    },
    {
      "type": "codeBlocks",
      "description": "Unrendered code blocks",
      "count": 1,
      "samples": [
        "`)</p>\n<p>client := &amp;http.Client {\n}\nreq, err := http.NewRequest(method, url, payload)</p>\n<p>if err != nil {\nfmt.Println(err)\nreturn\n}\nreq.Header.Add(&quot;Authorization&quot;, &quot;Basic API_KEY:API_SECRET&quot;)\nreq.Header.Add(&quot;Content-Type&quot;, &quot;application/json&quot;)</p>\n<p>res, err := client.Do(req)\nif err != nil {\nfmt.Println(err)\nreturn\n}\ndefer res.Body.Close()</p>\n<p>body, err := ioutil.ReadAll(res.Body)\nif err != nil {\nfmt.Println(err)\nreturn\n}\nfmt.Println(string(body))\n}\n</code></pre></p>\n<p></div>\n</div>\n</div>\n</details></p>\n<p><details x-data=\"{ expanded: false}\"\n    class=\"border rounded-md border-amp-light-blue-500 bg-amp-light-blue-900 relative cursor-pointer\"\n    @click=\"expanded = !expanded\">\n    <summary class=\"flex relative\"><span class=\"w-full font-semibold text-sm summary-name m-4\">Example: Delete users from all projects</span><span\n            class=\"transform -translate-y-1/2 transistion duration-100 absolute right-4 top-1/2\" x-ref=\"animatedItem\"\n            :class=\"{'rotate-90': expanded, 'rotate-0': !expanded}\">\n            <svg class=\"rotate-[270deg]\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\"><g id=\"icon-chevron-down\"><path id=\"Vector\" d=\"M10.25 10.6338L13.8837 7L15 8.11625L10.25 12.8663L5.5 8.11625L6.61625 7L10.25 10.6338Z\" fill=\"#5A5E68\"/></g></svg></span></summary>\n    <div @click.stop class=\"p-4 mt-4 bg-white overflow-x-scroll detail\">\n<div class=\"border border-amp-gray-200 rounded\" x-data=\"{ activeTab: 'cURL' }\">\n<div class=\"flex space-x-1\">\n<button x-on:click=\"activeTab = 'cURL'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'cURL', 'bg-gray-200': activeTab !== 'cURL'}\" class=\"px-4  py-2\">cURL</button><button x-on:click=\"activeTab = 'HTTP'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'HTTP', 'bg-gray-200': activeTab !== 'HTTP'}\" class=\"px-4  py-2\">HTTP</button><button x-on:click=\"activeTab = 'JavaScript'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'JavaScript', 'bg-gray-200': activeTab !== 'JavaScript'}\" class=\"px-4  py-2\">JavaScript</button><button x-on:click=\"activeTab = 'Node'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Node', 'bg-gray-200': activeTab !== 'Node'}\" class=\"px-4  py-2\">Node</button><button x-on:click=\"activeTab = 'Ruby'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Ruby', 'bg-gray-200': activeTab !== 'Ruby'}\" class=\"px-4  py-2\">Ruby</button><button x-on:click=\"activeTab = 'Python'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Python', 'bg-gray-200': activeTab !== 'Python'}\" class=\"px-4  py-2\">Python</button><button x-on:click=\"activeTab = 'Java'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Java', 'bg-gray-200': activeTab !== 'Java'}\" class=\"px-4  py-2\">Java</button><button x-on:click=\"activeTab = 'Go'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Go', 'bg-gray-200': activeTab !== 'Go'}\" class=\"px-4  py-2\">Go</button></div>\n<div x-cloak x-show=\"activeTab === 'cURL'\" class=\"p-4 tab\"></p>\n\n<p>}'\n</code></pre></p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'HTTP'\" class=\"p-4 tab\"></p>\n\n<p>}\n</code></pre></p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'JavaScript'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Node'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Ruby'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Python'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Java'\" class=\"p-4 tab\"></p>\n\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Go'\" class=\"p-4 tab\"></p>\n\n<p>}`"
      ],
      "url": "https://amplitude.com/docs/apis/analytics/user-privacy"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 2,
      "samples": [
        "*/chart/*",
        "* is a wildcard. You can also enter strings like &quot;*"
      ],
      "url": "https://amplitude.com/docs/analytics/charts/build-charts-modify-user-segment"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 2,
      "samples": [
        "*</li>\n<li><strong>Chart IDs</strong>: A list of the chart IDs *",
        "*</li>\n</ul>\n<p>*"
      ],
      "url": "https://amplitude.com/docs/admin/billing-use/usage-reports"
    },
    {
      "type": "lists",
      "description": "Unrendered lists (- or * bullets)",
      "count": 2,
      "samples": [
        "- <strong>Require suffix</strong>: When set, this allows users to append a string at the end of every file exported to S3.<br />",
        "    - <strong>User property</strong>: You can select a single user property to sync along with each user as an extra column in each file exported.</li>"
      ],
      "url": "https://amplitude.com/docs/data/destination-catalog/amazon-s3-cohort"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "**,**"
      ],
      "url": "https://amplitude.com/docs/data/destination-catalog/vwo"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "*.*"
      ],
      "url": "https://amplitude.com/docs/admin/single-sign-on/auth-0"
    },
    {
      "type": "lists",
      "description": "Unrendered lists (- or * bullets)",
      "count": 2,
      "samples": [
        "- Full Sync: Amplitude periodically imports the entire dataset, regardless of whether the data is already imported. This is good for data sets where the row data changes over time, but there is no easy way to tell which rows have changed. Otherwise, the more efficient option would be a time-based import. This option isn't supported for ingesting event data.<br />",
        "- Time-based: Amplitude periodically ingests the most recent rows in the data, as determined by the provided Timestamp column. The first import ingests all available data, and later imports ingest any data with timestamps after the time of the most recent import. To use this option, include the timestamp column in the output of your SQL statement.</li>"
      ],
      "url": "https://amplitude.com/docs/data/source-catalog/bigquery"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* 100</li>\n<li>Event totals: T/E</li>\n<li>Sum of property value: S/E</li>\n<li>Average of property value: A/E</li>\n<li>Funnel conversion, uniques: FM/E</li>\n<li>Funnel conversion, totals: FT/E</li>\n</ul>\n<h2 id=\"examples\">Examples<a href=\"#examples\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h2>\n<p>For this example, assume the metric event has a numeric event property VALUE. This table is the chronological log of events coming into Amplitude:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>User</strong></td>\n<td><strong>Event type</strong></td>\n<td><strong>Metric event property value</strong></td>\n</tr>\n<tr>\n<td>U1</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U1</td>\n<td>Metric event</td>\n<td>5</td>\n</tr>\n<tr>\n<td>U1</td>\n<td>Metric event</td>\n<td>10</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U2</td>\n<td>Metric event</td>\n<td>15</td>\n</tr>\n<tr>\n<td>U3</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U3</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U4</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U5</td>\n<td>Metric event</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<p>In this example, the number of unique users exposed to the experiment—E in the list of notations above—is four (U1, U2, U3, U4). Of those, the number who triggered the metric event (M in the list) is two (U1 and U2). U5 doesn’t count, as they were not exposed to the experiment.</p>\n<p>The metric event was triggered three times, twice by U1 and once by U2. Again, U5 does not count.</p>\n<p>The sum of all the metric events' property values is 30, and the sum of their average —  — is 22.5.</p>\n<p>With that information, we can plug these values into each of the formulas listed above:</p>\n<ul>\n<li>Unique conversions = (M/E) *"
      ],
      "url": "https://amplitude.com/docs/feature-experiment/under-the-hood/experiment-analysis-chart-calculation"
    },
    {
      "type": "tables",
      "description": "Unrendered table (pipe characters)",
      "count": 1,
      "samples": [
        "|| 80% treatment, 20% control</li>\n<li>Segment 2: Country = Canada |"
      ],
      "url": "https://amplitude.com/docs/feature-experiment/workflow/add-variants"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* price. Defaults to 1</td>\n</tr>\n<tr>\n<td></td>\n<td>Required. Double. The price of the products purchased, and this can be negative. Note: revenue = quantity *"
      ],
      "url": "https://amplitude.com/docs/sdks/analytics/android/android-kotlin-sdk"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* price.</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Required. . The price of the products purchased, and this can be negative. Note: revenue = quantity *"
      ],
      "url": "https://amplitude.com/docs/sdks/analytics/browser/browser-sdk-2"
    },
    {
      "type": "tables",
      "description": "Unrendered table (pipe characters)",
      "count": 2,
      "samples": [
        "|correlation| &gt;= 0.4</li>\n<li><strong>Moderately Predictive</strong>: 0.3 &lt;= |",
        "| &lt; 0.4</li>\n<li><strong>Slightly Predictive</strong>: 0.2 &lt;= |correlation|"
      ],
      "url": "https://amplitude.com/docs/analytics/charts/compass/compass-interpret-2"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* three property values) display in the Data Table.</li>\n<li>If you export a funnel metric without attribution, grouped by a non-time property, the .CSV export result limit is 300 rows.<br />\nIf, for example, you add another top-level group-by for the day property (a time property), and the date range includes seven days (and thus, seven different values for the property), up to 2100 rows (300 rows *"
      ],
      "url": "https://amplitude.com/docs/analytics/charts/data-tables/data-tables-results-and-sorting-logic"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* Price</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Price (optional *"
      ],
      "url": "https://amplitude.com/docs/sdks/analytics/go/go-sdk"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* price. Defaults to 1.</td>\n</tr>\n<tr>\n<td></td>\n<td>Required. NSNumber. The price of the products purchased, and this can be negative. Note: revenue = quantity *"
      ],
      "url": "https://amplitude.com/docs/sdks/analytics/ios/ios-sdk"
    },
    {
      "type": "emphasis",
      "description": "Unrendered emphasis (**bold** or *italic*)",
      "count": 1,
      "samples": [
        "* price. Defaults to 1</td>\n</tr>\n<tr>\n<td></td>\n<td>Required. Double. The price of the products purchased, and this can be negative. Note: revenue = quantity *"
      ],
      "url": "https://amplitude.com/docs/sdks/analytics/react-native/react-native-sdk"
    }
  ],
  "summary": {
    "totalUrls": 749,
    "totalErrors": 2,
    "totalSkipped": 1,
    "totalIssues": 22,
    "urlsWithIssues": 22,
    "ignorePatterns": [
      "/docs/llms",
      "*.pdf",
      "*.zip",
      "/docs/jp/*"
    ],
    "ignoreUrls": [],
    "issuesByType": [
      {
        "type": "tables",
        "count": 3,
        "description": "Unrendered table (pipe characters)"
      },
      {
        "type": "emphasis",
        "count": 16,
        "description": "Unrendered emphasis (**bold** or *italic*)"
      },
      {
        "type": "codeBlocks",
        "count": 1,
        "description": "Unrendered code blocks"
      },
      {
        "type": "lists",
        "count": 2,
        "description": "Unrendered lists (- or * bullets)"
      }
    ]
  },
  "issuesByType": {
    "tables": [
      {
        "type": "tables",
        "description": "Unrendered table (pipe characters)",
        "count": 4,
        "samples": [
          "|&quot; character separates non-repeating and repeating arguments. Any arguments after &quot;|&quot; are repeatable arguments and you can specify them any number of times. However, the entire list of arguments <strong>must</strong> be present in any multiple argument operator (meaning, you can't specify just one of three arguments, you must include all three).</p>\n \n\n<table>\n<thead>\n<tr>\n<th><div class=\"big-column\">Operator</div></th>\n<th>Description</th>\n<th>Syntax</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>Evaluates each SourceDescription sequentially on the returned JsonElement. Equivalent to evaluating a specific path when chaining BasicPaths. This also works with indexing into an array, for example [&quot;path&quot;, &quot;foo&quot;, &quot;1&quot;] chooses the element at index 1 (second element) in the array at &quot;foo&quot;.<strong>The index must be provided as a string.</strong></td>\n<td>[&quot;path&quot;, \\</td>\n<td>SOURCE_DESCRIPTION...]<strong>Example</strong>: [&quot;path&quot;, &quot;foo&quot;, &quot;bar&quot;] =&gt; obj['foo']['bar'].</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns the first value returned by SOURCE_DESCRIPTION in the list.</td>\n<td>[&quot;any&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Escapes a single JSON value so you can create a static value.</td>\n<td><strong>Example</strong>: [&quot;value&quot;, &quot;amplitude-vacuum&quot;...</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Creates a dictionary (object) where the raw_strings are keys and values are the evaluated SOURCE_DESCRIPTIONS.</td>\n<td>[&quot;dict&quot;, &quot;raw_string&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>&quot;raw_string&quot;, SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns an array, where elements are the values returned by evaluating SOURCE_DESCRIPTIONS. If a SOURCE_DESCRIPTION fails to evaluate, it will be skipped</td>\n<td>[&quot;array&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Determines the first true BooleanCondition and returns the result of the following SOURCE_DESCRIPTION. Throws a NoValueFoundAtSource exception if nothing evaluates to true.</td>\n<td>[&quot;condition&quot;\\</td>\n<td>&quot;cond&quot;, BOOLEAN_SOURCE, SOURCE_DESCRIPTION, \\</td>\n<td>BOOLEAN_SOURCE, SOURCE_DESCRIPTION...]</td>\n</tr>\n<tr>\n<td></td>\n<td>If the BOOLEAN_SOURCE evaluates to true, returns the first SOURCE_DESCRIPTION. Otherwise returns the second SOURCE_DESCRIPTION.</td>\n<td>[&quot;ifelse&quot;, BOOLEAN_SOURCE, SOURCE_DESCRIPTION, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Evaluates the given sampleKey (second arg) with the samplePercent (first arg) to determine whether it should be in the sample. Returns boolean</td>\n<td>[&quot;sample_md5&quot;, SOURCE_DESCRIPTION, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the string returned by SOURCE_DESCRIPTION is an ISO datetime string, for example, , and converts to milliseconds since epoch</td>\n<td>[&quot;iso_time_to_ms&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the string returned by SOURCE_DESCRIPTION is milliseconds since epoch and converts to ISO datetime string, for example, </td>\n<td>[&quot;ms_to_iso_time&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Generates an ISO datetime string for right now</td>\n<td>[&quot;iso_time_now&quot;]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Generates the milliseconds since epoch for right now</td>\n<td>[&quot;ms_time_now&quot;]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the string returned by SOURCE_DESCRIPTION is a base64-encoded INT96, for example, , and converts to milliseconds since epoch</td>\n<td>[&quot;int96_time_to_ms&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Takes in a RAW_STRING time format, for example, , and a  that returns a string in that format, for example, '1/1/2021 5:06:07', and converts to milliseconds since epoch</td>\n<td>[&quot;parse_time_to_ms&quot;, RAW_STRING, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the value returned by SOURCE_DESCRIPTION is a string json blob and returns the parsed json value</td>\n<td>[&quot;parse_json_element&quot;\\</td>\n<td>&quot;parse_json_object&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Merges the json objects that each SOURCE_DESCRIPTION evaluates to</td>\n<td>[&quot;merge_dicts&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Flattens a nested json object into a single layer json object</td>\n<td>[&quot;flatten_dict&quot;, &quot;raw_string&quot;, INTEGER_SOURCE, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Evaluates the specified SourceDescription the returned JsonElement without the requested fields</td>\n<td>[&quot;exclude_keys&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>&quot;raw_string&quot;...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Treats the results of each SOURCE_DESCRIPTION as a string and returns the concatenated string</td>\n<td>[&quot;concat&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Replace all old_string within the value returned by SOURCE_DESCRIPTION with new_string. Returns a string or raises a NoValueException if SOURCE_DESCRIPTION can't be evaluated to a string. The old_string supports Java's regex syntax for matching patterns, more details at https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html</td>\n<td>[&quot;replace_with&quot;, &quot;old_string&quot;, &quot;new_string&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Splits the value returned by SOURCE_DESCRIPTION by the specified character sequence. Returns a jsonArray or raises a NoValueException if SOURCE_DESCRIPTION can't be evaluated to a string</td>\n<td>[&quot;split&quot;, &quot;raw_string&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns the lowercase string</td>\n<td>[&quot;lowercase&quot;\\</td>\n<td>&quot;lower&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns type of the source description as a string: 'string', 'list', 'dict', 'bool', 'number', 'null'</td>\n<td>[&quot;typeof&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"boolean-operators\">Boolean operators<a href=\"#boolean-operators\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h3>\n<p>These operators return a JsonPrimitive of type Boolean, so they're valid to use with  and .</p>\n \n\n<table>\n<thead>\n<tr>\n<th><strong>Operator</strong></th>\n<th><strong>Description</strong></th>\n<th><strong>Source</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>Evaluates as a static boolean value. Throws an exception during initialization if RAW_JSON isn't a boolean value.</td>\n<td>[&quot;bool&quot;, any_json]</td>\n</tr>\n<tr>\n<td></td>\n<td>Return whether both arguments are true. Null values are treated as false, string 'true' or 'false' is cast to a boolean.</td>\n<td>[&quot;not&quot;|",
          "|&quot;&amp;&amp;&quot;, SOURCE_DESCRIPTION, | SOURCE_DESCRIPTION...]</td>\n</tr>\n<tr>\n<td></td>\n<td>Return whether at least one argument is true. Null values are treated as false, string 'true' or 'false' is cast to a boolean.</td>\n<td>[&quot;or&quot;|",
          "||&quot;, SOURCE_DESCRIPTION, |"
        ],
        "url": "https://amplitude.com/docs/data/converter-configuration-reference"
      },
      {
        "type": "tables",
        "description": "Unrendered table (pipe characters)",
        "count": 1,
        "samples": [
          "|| 80% treatment, 20% control</li>\n<li>Segment 2: Country = Canada |"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/workflow/add-variants"
      },
      {
        "type": "tables",
        "description": "Unrendered table (pipe characters)",
        "count": 2,
        "samples": [
          "|correlation| &gt;= 0.4</li>\n<li><strong>Moderately Predictive</strong>: 0.3 &lt;= |",
          "| &lt; 0.4</li>\n<li><strong>Slightly Predictive</strong>: 0.2 &lt;= |correlation|"
        ],
        "url": "https://amplitude.com/docs/analytics/charts/compass/compass-interpret-2"
      }
    ],
    "emphasis": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* <strong>E</strong> *"
        ],
        "url": "https://amplitude.com/docs/web-experiment/tracking"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* (75th percentile - 25th percentile)</li>\n<li>Lower Bound: 25th percentile - 1.5 *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/find-and-resolve-outliers-in-your-data"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* 0.95 = 0.9025 (90.25%)</p>\n<p>Instead of adding an experiment to multiple holdout groups, create a single group with all the relevant experiments instead. This will allow for a more even distribution of traffic across experiments. </p>\n<p>In the example above, you would create just <strong>one</strong> holdout group containing all three experiments (A, B, and C).</p>\n<h2 id=\"case-2-handle-experiments-with-holdout-groups-and-mutual-exclusion\">Case 2: Handle experiments with holdout groups and mutual exclusion<a href=\"#case-2-handle-experiments-with-holdout-groups-and-mutual-exclusion\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h2>\n<p>Adding an experiment to a holdout group <strong>and</strong> a mutual exclusion group can also further limit the amount of traffic to the experiment. Each user will be evaluated for both the holdout group <strong>and</strong> the mutual exclusion group.</p>\n<p>For example, imagine the following holdout group and mutual exclusion group: </p>\n<ul>\n<li><strong>The holdout group</strong> has a holdout percentage of 5% and contains <strong>experiment A</strong>.</li>\n<li><strong>The mutual exclusion group</strong> has half the traffic directed to <strong>experiment A in slot 1</strong>, with the other half going to <strong>experiment B in slot 2</strong>.</li>\n</ul>\n<p>In this scenario, experiment A receives about half of the total traffic:</p>\n<p>0.95 *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/holdout-groups-advanced-use-cases"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* 0.95 = 0.9025 (90.25%)</p>\n<p>Instead of adding an experiment to multiple holdout groups, create a single group with all the relevant experiments instead. This allows for a more even distribution of traffic across experiments. </p>\n<p>In the example above, you would create just <strong>one</strong> holdout group containing all three experiments (A, B, and C).</p>\n<h3 id=\"handle-experiments-with-holdout-groups-and-mutual-exclusion\">Handle experiments with holdout groups and mutual exclusion<a href=\"#handle-experiments-with-holdout-groups-and-mutual-exclusion\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h3>\n<p>Adding an experiment to a holdout group <strong>and</strong> a mutual exclusion group can also further limit the amount of traffic to the experiment. Experiment evaluates each user for both the holdout group <strong>and</strong> the mutual exclusion group.</p>\n<p>For example, imagine the following holdout group and mutual exclusion group: </p>\n<ul>\n<li><strong>The holdout group</strong> has a holdout percentage of 5% and contains <strong>experiment A</strong>.</li>\n<li><strong>The mutual exclusion group</strong> has half the traffic directed to <strong>experiment A in slot 1</strong>, with the other half  to <strong>experiment B in slot 2</strong>.</li>\n</ul>\n<p>In this scenario, experiment A receives about half of the total traffic:</p>\n<p>0.95 *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/holdout-groups-exclude-users"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* 0.5 = 0.25, or 25% of the total traffic.</p>\n<p>Instead of adding an experiment to multiple mutual exclusion groups, create a group that includes all the relevant experiments instead; here, that group would contain experiments A, B, and C.</p>\n<ul>\n<li>Adding an experiment to a holdout group <strong>and</strong> a mutual exclusion group will further limit the amount of traffic to the experiment, as each user will be evaluated for both groups.</li>\n</ul>\n<p>For example, consider the following holdout group and mutual exclusion group: </p>\n<ul>\n<li>The holdout group contains experiment A, with a holdout percentage of 5%</li>\n<li>The mutual exclusion group contains experiment A in slot 1 and experiment B in slot 2, where each experiment receives 50% of the traffic</li>\n</ul>\n<p>In this case, experiment A will receive 0.95 *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/mutually-exclusive-experiments"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 2,
        "samples": [
          "*/chart/*",
          "* is a wildcard. You can also enter strings like &quot;*"
        ],
        "url": "https://amplitude.com/docs/analytics/charts/build-charts-modify-user-segment"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 2,
        "samples": [
          "*</li>\n<li><strong>Chart IDs</strong>: A list of the chart IDs *",
          "*</li>\n</ul>\n<p>*"
        ],
        "url": "https://amplitude.com/docs/admin/billing-use/usage-reports"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "**,**"
        ],
        "url": "https://amplitude.com/docs/data/destination-catalog/vwo"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "*.*"
        ],
        "url": "https://amplitude.com/docs/admin/single-sign-on/auth-0"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* 100</li>\n<li>Event totals: T/E</li>\n<li>Sum of property value: S/E</li>\n<li>Average of property value: A/E</li>\n<li>Funnel conversion, uniques: FM/E</li>\n<li>Funnel conversion, totals: FT/E</li>\n</ul>\n<h2 id=\"examples\">Examples<a href=\"#examples\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h2>\n<p>For this example, assume the metric event has a numeric event property VALUE. This table is the chronological log of events coming into Amplitude:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>User</strong></td>\n<td><strong>Event type</strong></td>\n<td><strong>Metric event property value</strong></td>\n</tr>\n<tr>\n<td>U1</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U1</td>\n<td>Metric event</td>\n<td>5</td>\n</tr>\n<tr>\n<td>U1</td>\n<td>Metric event</td>\n<td>10</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U2</td>\n<td>Metric event</td>\n<td>15</td>\n</tr>\n<tr>\n<td>U3</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U3</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U4</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U5</td>\n<td>Metric event</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<p>In this example, the number of unique users exposed to the experiment—E in the list of notations above—is four (U1, U2, U3, U4). Of those, the number who triggered the metric event (M in the list) is two (U1 and U2). U5 doesn’t count, as they were not exposed to the experiment.</p>\n<p>The metric event was triggered three times, twice by U1 and once by U2. Again, U5 does not count.</p>\n<p>The sum of all the metric events' property values is 30, and the sum of their average —  — is 22.5.</p>\n<p>With that information, we can plug these values into each of the formulas listed above:</p>\n<ul>\n<li>Unique conversions = (M/E) *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/under-the-hood/experiment-analysis-chart-calculation"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* price. Defaults to 1</td>\n</tr>\n<tr>\n<td></td>\n<td>Required. Double. The price of the products purchased, and this can be negative. Note: revenue = quantity *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/android/android-kotlin-sdk"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* price.</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Required. . The price of the products purchased, and this can be negative. Note: revenue = quantity *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/browser/browser-sdk-2"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* three property values) display in the Data Table.</li>\n<li>If you export a funnel metric without attribution, grouped by a non-time property, the .CSV export result limit is 300 rows.<br />\nIf, for example, you add another top-level group-by for the day property (a time property), and the date range includes seven days (and thus, seven different values for the property), up to 2100 rows (300 rows *"
        ],
        "url": "https://amplitude.com/docs/analytics/charts/data-tables/data-tables-results-and-sorting-logic"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* Price</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Price (optional *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/go/go-sdk"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* price. Defaults to 1.</td>\n</tr>\n<tr>\n<td></td>\n<td>Required. NSNumber. The price of the products purchased, and this can be negative. Note: revenue = quantity *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/ios/ios-sdk"
      },
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* price. Defaults to 1</td>\n</tr>\n<tr>\n<td></td>\n<td>Required. Double. The price of the products purchased, and this can be negative. Note: revenue = quantity *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/react-native/react-native-sdk"
      }
    ],
    "codeBlocks": [
      {
        "type": "codeBlocks",
        "description": "Unrendered code blocks",
        "count": 1,
        "samples": [
          "`)</p>\n<p>client := &amp;http.Client {\n}\nreq, err := http.NewRequest(method, url, payload)</p>\n<p>if err != nil {\nfmt.Println(err)\nreturn\n}\nreq.Header.Add(&quot;Authorization&quot;, &quot;Basic API_KEY:API_SECRET&quot;)\nreq.Header.Add(&quot;Content-Type&quot;, &quot;application/json&quot;)</p>\n<p>res, err := client.Do(req)\nif err != nil {\nfmt.Println(err)\nreturn\n}\ndefer res.Body.Close()</p>\n<p>body, err := ioutil.ReadAll(res.Body)\nif err != nil {\nfmt.Println(err)\nreturn\n}\nfmt.Println(string(body))\n}\n</code></pre></p>\n<p></div>\n</div>\n</div>\n</details></p>\n<p><details x-data=\"{ expanded: false}\"\n    class=\"border rounded-md border-amp-light-blue-500 bg-amp-light-blue-900 relative cursor-pointer\"\n    @click=\"expanded = !expanded\">\n    <summary class=\"flex relative\"><span class=\"w-full font-semibold text-sm summary-name m-4\">Example: Delete users from all projects</span><span\n            class=\"transform -translate-y-1/2 transistion duration-100 absolute right-4 top-1/2\" x-ref=\"animatedItem\"\n            :class=\"{'rotate-90': expanded, 'rotate-0': !expanded}\">\n            <svg class=\"rotate-[270deg]\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\"><g id=\"icon-chevron-down\"><path id=\"Vector\" d=\"M10.25 10.6338L13.8837 7L15 8.11625L10.25 12.8663L5.5 8.11625L6.61625 7L10.25 10.6338Z\" fill=\"#5A5E68\"/></g></svg></span></summary>\n    <div @click.stop class=\"p-4 mt-4 bg-white overflow-x-scroll detail\">\n<div class=\"border border-amp-gray-200 rounded\" x-data=\"{ activeTab: 'cURL' }\">\n<div class=\"flex space-x-1\">\n<button x-on:click=\"activeTab = 'cURL'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'cURL', 'bg-gray-200': activeTab !== 'cURL'}\" class=\"px-4  py-2\">cURL</button><button x-on:click=\"activeTab = 'HTTP'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'HTTP', 'bg-gray-200': activeTab !== 'HTTP'}\" class=\"px-4  py-2\">HTTP</button><button x-on:click=\"activeTab = 'JavaScript'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'JavaScript', 'bg-gray-200': activeTab !== 'JavaScript'}\" class=\"px-4  py-2\">JavaScript</button><button x-on:click=\"activeTab = 'Node'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Node', 'bg-gray-200': activeTab !== 'Node'}\" class=\"px-4  py-2\">Node</button><button x-on:click=\"activeTab = 'Ruby'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Ruby', 'bg-gray-200': activeTab !== 'Ruby'}\" class=\"px-4  py-2\">Ruby</button><button x-on:click=\"activeTab = 'Python'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Python', 'bg-gray-200': activeTab !== 'Python'}\" class=\"px-4  py-2\">Python</button><button x-on:click=\"activeTab = 'Java'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Java', 'bg-gray-200': activeTab !== 'Java'}\" class=\"px-4  py-2\">Java</button><button x-on:click=\"activeTab = 'Go'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Go', 'bg-gray-200': activeTab !== 'Go'}\" class=\"px-4  py-2\">Go</button></div>\n<div x-cloak x-show=\"activeTab === 'cURL'\" class=\"p-4 tab\"></p>\n\n<p>}'\n</code></pre></p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'HTTP'\" class=\"p-4 tab\"></p>\n\n<p>}\n</code></pre></p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'JavaScript'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Node'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Ruby'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Python'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Java'\" class=\"p-4 tab\"></p>\n\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Go'\" class=\"p-4 tab\"></p>\n\n<p>}`"
        ],
        "url": "https://amplitude.com/docs/apis/analytics/user-privacy"
      }
    ],
    "lists": [
      {
        "type": "lists",
        "description": "Unrendered lists (- or * bullets)",
        "count": 2,
        "samples": [
          "- <strong>Require suffix</strong>: When set, this allows users to append a string at the end of every file exported to S3.<br />",
          "    - <strong>User property</strong>: You can select a single user property to sync along with each user as an extra column in each file exported.</li>"
        ],
        "url": "https://amplitude.com/docs/data/destination-catalog/amazon-s3-cohort"
      },
      {
        "type": "lists",
        "description": "Unrendered lists (- or * bullets)",
        "count": 2,
        "samples": [
          "- Full Sync: Amplitude periodically imports the entire dataset, regardless of whether the data is already imported. This is good for data sets where the row data changes over time, but there is no easy way to tell which rows have changed. Otherwise, the more efficient option would be a time-based import. This option isn't supported for ingesting event data.<br />",
          "- Time-based: Amplitude periodically ingests the most recent rows in the data, as determined by the provided Timestamp column. The first import ingests all available data, and later imports ingest any data with timestamps after the time of the most recent import. To use this option, include the timestamp column in the output of your SQL statement.</li>"
        ],
        "url": "https://amplitude.com/docs/data/source-catalog/bigquery"
      }
    ]
  },
  "issuesByUrl": {
    "https://amplitude.com/docs/data/converter-configuration-reference": [
      {
        "type": "tables",
        "description": "Unrendered table (pipe characters)",
        "count": 4,
        "samples": [
          "|&quot; character separates non-repeating and repeating arguments. Any arguments after &quot;|&quot; are repeatable arguments and you can specify them any number of times. However, the entire list of arguments <strong>must</strong> be present in any multiple argument operator (meaning, you can't specify just one of three arguments, you must include all three).</p>\n \n\n<table>\n<thead>\n<tr>\n<th><div class=\"big-column\">Operator</div></th>\n<th>Description</th>\n<th>Syntax</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>Evaluates each SourceDescription sequentially on the returned JsonElement. Equivalent to evaluating a specific path when chaining BasicPaths. This also works with indexing into an array, for example [&quot;path&quot;, &quot;foo&quot;, &quot;1&quot;] chooses the element at index 1 (second element) in the array at &quot;foo&quot;.<strong>The index must be provided as a string.</strong></td>\n<td>[&quot;path&quot;, \\</td>\n<td>SOURCE_DESCRIPTION...]<strong>Example</strong>: [&quot;path&quot;, &quot;foo&quot;, &quot;bar&quot;] =&gt; obj['foo']['bar'].</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns the first value returned by SOURCE_DESCRIPTION in the list.</td>\n<td>[&quot;any&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Escapes a single JSON value so you can create a static value.</td>\n<td><strong>Example</strong>: [&quot;value&quot;, &quot;amplitude-vacuum&quot;...</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Creates a dictionary (object) where the raw_strings are keys and values are the evaluated SOURCE_DESCRIPTIONS.</td>\n<td>[&quot;dict&quot;, &quot;raw_string&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>&quot;raw_string&quot;, SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns an array, where elements are the values returned by evaluating SOURCE_DESCRIPTIONS. If a SOURCE_DESCRIPTION fails to evaluate, it will be skipped</td>\n<td>[&quot;array&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Determines the first true BooleanCondition and returns the result of the following SOURCE_DESCRIPTION. Throws a NoValueFoundAtSource exception if nothing evaluates to true.</td>\n<td>[&quot;condition&quot;\\</td>\n<td>&quot;cond&quot;, BOOLEAN_SOURCE, SOURCE_DESCRIPTION, \\</td>\n<td>BOOLEAN_SOURCE, SOURCE_DESCRIPTION...]</td>\n</tr>\n<tr>\n<td></td>\n<td>If the BOOLEAN_SOURCE evaluates to true, returns the first SOURCE_DESCRIPTION. Otherwise returns the second SOURCE_DESCRIPTION.</td>\n<td>[&quot;ifelse&quot;, BOOLEAN_SOURCE, SOURCE_DESCRIPTION, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Evaluates the given sampleKey (second arg) with the samplePercent (first arg) to determine whether it should be in the sample. Returns boolean</td>\n<td>[&quot;sample_md5&quot;, SOURCE_DESCRIPTION, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the string returned by SOURCE_DESCRIPTION is an ISO datetime string, for example, , and converts to milliseconds since epoch</td>\n<td>[&quot;iso_time_to_ms&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the string returned by SOURCE_DESCRIPTION is milliseconds since epoch and converts to ISO datetime string, for example, </td>\n<td>[&quot;ms_to_iso_time&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Generates an ISO datetime string for right now</td>\n<td>[&quot;iso_time_now&quot;]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Generates the milliseconds since epoch for right now</td>\n<td>[&quot;ms_time_now&quot;]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the string returned by SOURCE_DESCRIPTION is a base64-encoded INT96, for example, , and converts to milliseconds since epoch</td>\n<td>[&quot;int96_time_to_ms&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Takes in a RAW_STRING time format, for example, , and a  that returns a string in that format, for example, '1/1/2021 5:06:07', and converts to milliseconds since epoch</td>\n<td>[&quot;parse_time_to_ms&quot;, RAW_STRING, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Assumes the value returned by SOURCE_DESCRIPTION is a string json blob and returns the parsed json value</td>\n<td>[&quot;parse_json_element&quot;\\</td>\n<td>&quot;parse_json_object&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Merges the json objects that each SOURCE_DESCRIPTION evaluates to</td>\n<td>[&quot;merge_dicts&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Flattens a nested json object into a single layer json object</td>\n<td>[&quot;flatten_dict&quot;, &quot;raw_string&quot;, INTEGER_SOURCE, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Evaluates the specified SourceDescription the returned JsonElement without the requested fields</td>\n<td>[&quot;exclude_keys&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>&quot;raw_string&quot;...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Treats the results of each SOURCE_DESCRIPTION as a string and returns the concatenated string</td>\n<td>[&quot;concat&quot;, SOURCE_DESCRIPTION, \\</td>\n<td>SOURCE_DESCRIPTION...]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Replace all old_string within the value returned by SOURCE_DESCRIPTION with new_string. Returns a string or raises a NoValueException if SOURCE_DESCRIPTION can't be evaluated to a string. The old_string supports Java's regex syntax for matching patterns, more details at https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html</td>\n<td>[&quot;replace_with&quot;, &quot;old_string&quot;, &quot;new_string&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Splits the value returned by SOURCE_DESCRIPTION by the specified character sequence. Returns a jsonArray or raises a NoValueException if SOURCE_DESCRIPTION can't be evaluated to a string</td>\n<td>[&quot;split&quot;, &quot;raw_string&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns the lowercase string</td>\n<td>[&quot;lowercase&quot;\\</td>\n<td>&quot;lower&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Returns type of the source description as a string: 'string', 'list', 'dict', 'bool', 'number', 'null'</td>\n<td>[&quot;typeof&quot;, SOURCE_DESCRIPTION]</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"boolean-operators\">Boolean operators<a href=\"#boolean-operators\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h3>\n<p>These operators return a JsonPrimitive of type Boolean, so they're valid to use with  and .</p>\n \n\n<table>\n<thead>\n<tr>\n<th><strong>Operator</strong></th>\n<th><strong>Description</strong></th>\n<th><strong>Source</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>Evaluates as a static boolean value. Throws an exception during initialization if RAW_JSON isn't a boolean value.</td>\n<td>[&quot;bool&quot;, any_json]</td>\n</tr>\n<tr>\n<td></td>\n<td>Return whether both arguments are true. Null values are treated as false, string 'true' or 'false' is cast to a boolean.</td>\n<td>[&quot;not&quot;|",
          "|&quot;&amp;&amp;&quot;, SOURCE_DESCRIPTION, | SOURCE_DESCRIPTION...]</td>\n</tr>\n<tr>\n<td></td>\n<td>Return whether at least one argument is true. Null values are treated as false, string 'true' or 'false' is cast to a boolean.</td>\n<td>[&quot;or&quot;|",
          "||&quot;, SOURCE_DESCRIPTION, |"
        ],
        "url": "https://amplitude.com/docs/data/converter-configuration-reference"
      }
    ],
    "https://amplitude.com/docs/web-experiment/tracking": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* <strong>E</strong> *"
        ],
        "url": "https://amplitude.com/docs/web-experiment/tracking"
      }
    ],
    "https://amplitude.com/docs/feature-experiment/advanced-techniques/find-and-resolve-outliers-in-your-data": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* (75th percentile - 25th percentile)</li>\n<li>Lower Bound: 25th percentile - 1.5 *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/find-and-resolve-outliers-in-your-data"
      }
    ],
    "https://amplitude.com/docs/feature-experiment/advanced-techniques/holdout-groups-advanced-use-cases": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* 0.95 = 0.9025 (90.25%)</p>\n<p>Instead of adding an experiment to multiple holdout groups, create a single group with all the relevant experiments instead. This will allow for a more even distribution of traffic across experiments. </p>\n<p>In the example above, you would create just <strong>one</strong> holdout group containing all three experiments (A, B, and C).</p>\n<h2 id=\"case-2-handle-experiments-with-holdout-groups-and-mutual-exclusion\">Case 2: Handle experiments with holdout groups and mutual exclusion<a href=\"#case-2-handle-experiments-with-holdout-groups-and-mutual-exclusion\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h2>\n<p>Adding an experiment to a holdout group <strong>and</strong> a mutual exclusion group can also further limit the amount of traffic to the experiment. Each user will be evaluated for both the holdout group <strong>and</strong> the mutual exclusion group.</p>\n<p>For example, imagine the following holdout group and mutual exclusion group: </p>\n<ul>\n<li><strong>The holdout group</strong> has a holdout percentage of 5% and contains <strong>experiment A</strong>.</li>\n<li><strong>The mutual exclusion group</strong> has half the traffic directed to <strong>experiment A in slot 1</strong>, with the other half going to <strong>experiment B in slot 2</strong>.</li>\n</ul>\n<p>In this scenario, experiment A receives about half of the total traffic:</p>\n<p>0.95 *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/holdout-groups-advanced-use-cases"
      }
    ],
    "https://amplitude.com/docs/feature-experiment/advanced-techniques/holdout-groups-exclude-users": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* 0.95 = 0.9025 (90.25%)</p>\n<p>Instead of adding an experiment to multiple holdout groups, create a single group with all the relevant experiments instead. This allows for a more even distribution of traffic across experiments. </p>\n<p>In the example above, you would create just <strong>one</strong> holdout group containing all three experiments (A, B, and C).</p>\n<h3 id=\"handle-experiments-with-holdout-groups-and-mutual-exclusion\">Handle experiments with holdout groups and mutual exclusion<a href=\"#handle-experiments-with-holdout-groups-and-mutual-exclusion\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h3>\n<p>Adding an experiment to a holdout group <strong>and</strong> a mutual exclusion group can also further limit the amount of traffic to the experiment. Experiment evaluates each user for both the holdout group <strong>and</strong> the mutual exclusion group.</p>\n<p>For example, imagine the following holdout group and mutual exclusion group: </p>\n<ul>\n<li><strong>The holdout group</strong> has a holdout percentage of 5% and contains <strong>experiment A</strong>.</li>\n<li><strong>The mutual exclusion group</strong> has half the traffic directed to <strong>experiment A in slot 1</strong>, with the other half  to <strong>experiment B in slot 2</strong>.</li>\n</ul>\n<p>In this scenario, experiment A receives about half of the total traffic:</p>\n<p>0.95 *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/holdout-groups-exclude-users"
      }
    ],
    "https://amplitude.com/docs/feature-experiment/advanced-techniques/mutually-exclusive-experiments": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* 0.5 = 0.25, or 25% of the total traffic.</p>\n<p>Instead of adding an experiment to multiple mutual exclusion groups, create a group that includes all the relevant experiments instead; here, that group would contain experiments A, B, and C.</p>\n<ul>\n<li>Adding an experiment to a holdout group <strong>and</strong> a mutual exclusion group will further limit the amount of traffic to the experiment, as each user will be evaluated for both groups.</li>\n</ul>\n<p>For example, consider the following holdout group and mutual exclusion group: </p>\n<ul>\n<li>The holdout group contains experiment A, with a holdout percentage of 5%</li>\n<li>The mutual exclusion group contains experiment A in slot 1 and experiment B in slot 2, where each experiment receives 50% of the traffic</li>\n</ul>\n<p>In this case, experiment A will receive 0.95 *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/advanced-techniques/mutually-exclusive-experiments"
      }
    ],
    "https://amplitude.com/docs/apis/analytics/user-privacy": [
      {
        "type": "codeBlocks",
        "description": "Unrendered code blocks",
        "count": 1,
        "samples": [
          "`)</p>\n<p>client := &amp;http.Client {\n}\nreq, err := http.NewRequest(method, url, payload)</p>\n<p>if err != nil {\nfmt.Println(err)\nreturn\n}\nreq.Header.Add(&quot;Authorization&quot;, &quot;Basic API_KEY:API_SECRET&quot;)\nreq.Header.Add(&quot;Content-Type&quot;, &quot;application/json&quot;)</p>\n<p>res, err := client.Do(req)\nif err != nil {\nfmt.Println(err)\nreturn\n}\ndefer res.Body.Close()</p>\n<p>body, err := ioutil.ReadAll(res.Body)\nif err != nil {\nfmt.Println(err)\nreturn\n}\nfmt.Println(string(body))\n}\n</code></pre></p>\n<p></div>\n</div>\n</div>\n</details></p>\n<p><details x-data=\"{ expanded: false}\"\n    class=\"border rounded-md border-amp-light-blue-500 bg-amp-light-blue-900 relative cursor-pointer\"\n    @click=\"expanded = !expanded\">\n    <summary class=\"flex relative\"><span class=\"w-full font-semibold text-sm summary-name m-4\">Example: Delete users from all projects</span><span\n            class=\"transform -translate-y-1/2 transistion duration-100 absolute right-4 top-1/2\" x-ref=\"animatedItem\"\n            :class=\"{'rotate-90': expanded, 'rotate-0': !expanded}\">\n            <svg class=\"rotate-[270deg]\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\"><g id=\"icon-chevron-down\"><path id=\"Vector\" d=\"M10.25 10.6338L13.8837 7L15 8.11625L10.25 12.8663L5.5 8.11625L6.61625 7L10.25 10.6338Z\" fill=\"#5A5E68\"/></g></svg></span></summary>\n    <div @click.stop class=\"p-4 mt-4 bg-white overflow-x-scroll detail\">\n<div class=\"border border-amp-gray-200 rounded\" x-data=\"{ activeTab: 'cURL' }\">\n<div class=\"flex space-x-1\">\n<button x-on:click=\"activeTab = 'cURL'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'cURL', 'bg-gray-200': activeTab !== 'cURL'}\" class=\"px-4  py-2\">cURL</button><button x-on:click=\"activeTab = 'HTTP'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'HTTP', 'bg-gray-200': activeTab !== 'HTTP'}\" class=\"px-4  py-2\">HTTP</button><button x-on:click=\"activeTab = 'JavaScript'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'JavaScript', 'bg-gray-200': activeTab !== 'JavaScript'}\" class=\"px-4  py-2\">JavaScript</button><button x-on:click=\"activeTab = 'Node'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Node', 'bg-gray-200': activeTab !== 'Node'}\" class=\"px-4  py-2\">Node</button><button x-on:click=\"activeTab = 'Ruby'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Ruby', 'bg-gray-200': activeTab !== 'Ruby'}\" class=\"px-4  py-2\">Ruby</button><button x-on:click=\"activeTab = 'Python'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Python', 'bg-gray-200': activeTab !== 'Python'}\" class=\"px-4  py-2\">Python</button><button x-on:click=\"activeTab = 'Java'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Java', 'bg-gray-200': activeTab !== 'Java'}\" class=\"px-4  py-2\">Java</button><button x-on:click=\"activeTab = 'Go'\" :class=\"{'border-b-2 border-amp-blue-500 text-amp-blue-500 -mb-[2px]' : activeTab === 'Go', 'bg-gray-200': activeTab !== 'Go'}\" class=\"px-4  py-2\">Go</button></div>\n<div x-cloak x-show=\"activeTab === 'cURL'\" class=\"p-4 tab\"></p>\n\n<p>}'\n</code></pre></p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'HTTP'\" class=\"p-4 tab\"></p>\n\n<p>}\n</code></pre></p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'JavaScript'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Node'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Ruby'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Python'\" class=\"p-4 tab\"></p>\n</p>\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Java'\" class=\"p-4 tab\"></p>\n\n<p></div>\n<div x-cloak x-show=\"activeTab === 'Go'\" class=\"p-4 tab\"></p>\n\n<p>}`"
        ],
        "url": "https://amplitude.com/docs/apis/analytics/user-privacy"
      }
    ],
    "https://amplitude.com/docs/analytics/charts/build-charts-modify-user-segment": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 2,
        "samples": [
          "*/chart/*",
          "* is a wildcard. You can also enter strings like &quot;*"
        ],
        "url": "https://amplitude.com/docs/analytics/charts/build-charts-modify-user-segment"
      }
    ],
    "https://amplitude.com/docs/admin/billing-use/usage-reports": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 2,
        "samples": [
          "*</li>\n<li><strong>Chart IDs</strong>: A list of the chart IDs *",
          "*</li>\n</ul>\n<p>*"
        ],
        "url": "https://amplitude.com/docs/admin/billing-use/usage-reports"
      }
    ],
    "https://amplitude.com/docs/data/destination-catalog/amazon-s3-cohort": [
      {
        "type": "lists",
        "description": "Unrendered lists (- or * bullets)",
        "count": 2,
        "samples": [
          "- <strong>Require suffix</strong>: When set, this allows users to append a string at the end of every file exported to S3.<br />",
          "    - <strong>User property</strong>: You can select a single user property to sync along with each user as an extra column in each file exported.</li>"
        ],
        "url": "https://amplitude.com/docs/data/destination-catalog/amazon-s3-cohort"
      }
    ],
    "https://amplitude.com/docs/data/destination-catalog/vwo": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "**,**"
        ],
        "url": "https://amplitude.com/docs/data/destination-catalog/vwo"
      }
    ],
    "https://amplitude.com/docs/admin/single-sign-on/auth-0": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "*.*"
        ],
        "url": "https://amplitude.com/docs/admin/single-sign-on/auth-0"
      }
    ],
    "https://amplitude.com/docs/data/source-catalog/bigquery": [
      {
        "type": "lists",
        "description": "Unrendered lists (- or * bullets)",
        "count": 2,
        "samples": [
          "- Full Sync: Amplitude periodically imports the entire dataset, regardless of whether the data is already imported. This is good for data sets where the row data changes over time, but there is no easy way to tell which rows have changed. Otherwise, the more efficient option would be a time-based import. This option isn't supported for ingesting event data.<br />",
          "- Time-based: Amplitude periodically ingests the most recent rows in the data, as determined by the provided Timestamp column. The first import ingests all available data, and later imports ingest any data with timestamps after the time of the most recent import. To use this option, include the timestamp column in the output of your SQL statement.</li>"
        ],
        "url": "https://amplitude.com/docs/data/source-catalog/bigquery"
      }
    ],
    "https://amplitude.com/docs/feature-experiment/under-the-hood/experiment-analysis-chart-calculation": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* 100</li>\n<li>Event totals: T/E</li>\n<li>Sum of property value: S/E</li>\n<li>Average of property value: A/E</li>\n<li>Funnel conversion, uniques: FM/E</li>\n<li>Funnel conversion, totals: FT/E</li>\n</ul>\n<h2 id=\"examples\">Examples<a href=\"#examples\" class=\"heading-permalink\" aria-hidden=\"true\" title=\"Permalink\"></a></h2>\n<p>For this example, assume the metric event has a numeric event property VALUE. This table is the chronological log of events coming into Amplitude:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>User</strong></td>\n<td><strong>Event type</strong></td>\n<td><strong>Metric event property value</strong></td>\n</tr>\n<tr>\n<td>U1</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U1</td>\n<td>Metric event</td>\n<td>5</td>\n</tr>\n<tr>\n<td>U1</td>\n<td>Metric event</td>\n<td>10</td>\n</tr>\n<tr>\n<td>U2</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U2</td>\n<td>Metric event</td>\n<td>15</td>\n</tr>\n<tr>\n<td>U3</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U3</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U4</td>\n<td>Exposure event</td>\n<td></td>\n</tr>\n<tr>\n<td>U5</td>\n<td>Metric event</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n<p>In this example, the number of unique users exposed to the experiment—E in the list of notations above—is four (U1, U2, U3, U4). Of those, the number who triggered the metric event (M in the list) is two (U1 and U2). U5 doesn’t count, as they were not exposed to the experiment.</p>\n<p>The metric event was triggered three times, twice by U1 and once by U2. Again, U5 does not count.</p>\n<p>The sum of all the metric events' property values is 30, and the sum of their average —  — is 22.5.</p>\n<p>With that information, we can plug these values into each of the formulas listed above:</p>\n<ul>\n<li>Unique conversions = (M/E) *"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/under-the-hood/experiment-analysis-chart-calculation"
      }
    ],
    "https://amplitude.com/docs/feature-experiment/workflow/add-variants": [
      {
        "type": "tables",
        "description": "Unrendered table (pipe characters)",
        "count": 1,
        "samples": [
          "|| 80% treatment, 20% control</li>\n<li>Segment 2: Country = Canada |"
        ],
        "url": "https://amplitude.com/docs/feature-experiment/workflow/add-variants"
      }
    ],
    "https://amplitude.com/docs/sdks/analytics/android/android-kotlin-sdk": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* price. Defaults to 1</td>\n</tr>\n<tr>\n<td></td>\n<td>Required. Double. The price of the products purchased, and this can be negative. Note: revenue = quantity *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/android/android-kotlin-sdk"
      }
    ],
    "https://amplitude.com/docs/sdks/analytics/browser/browser-sdk-2": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* price.</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Required. . The price of the products purchased, and this can be negative. Note: revenue = quantity *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/browser/browser-sdk-2"
      }
    ],
    "https://amplitude.com/docs/analytics/charts/compass/compass-interpret-2": [
      {
        "type": "tables",
        "description": "Unrendered table (pipe characters)",
        "count": 2,
        "samples": [
          "|correlation| &gt;= 0.4</li>\n<li><strong>Moderately Predictive</strong>: 0.3 &lt;= |",
          "| &lt; 0.4</li>\n<li><strong>Slightly Predictive</strong>: 0.2 &lt;= |correlation|"
        ],
        "url": "https://amplitude.com/docs/analytics/charts/compass/compass-interpret-2"
      }
    ],
    "https://amplitude.com/docs/analytics/charts/data-tables/data-tables-results-and-sorting-logic": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* three property values) display in the Data Table.</li>\n<li>If you export a funnel metric without attribution, grouped by a non-time property, the .CSV export result limit is 300 rows.<br />\nIf, for example, you add another top-level group-by for the day property (a time property), and the date range includes seven days (and thus, seven different values for the property), up to 2100 rows (300 rows *"
        ],
        "url": "https://amplitude.com/docs/analytics/charts/data-tables/data-tables-results-and-sorting-logic"
      }
    ],
    "https://amplitude.com/docs/sdks/analytics/go/go-sdk": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* Price</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Price (optional *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/go/go-sdk"
      }
    ],
    "https://amplitude.com/docs/sdks/analytics/ios/ios-sdk": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* price. Defaults to 1.</td>\n</tr>\n<tr>\n<td></td>\n<td>Required. NSNumber. The price of the products purchased, and this can be negative. Note: revenue = quantity *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/ios/ios-sdk"
      }
    ],
    "https://amplitude.com/docs/sdks/analytics/react-native/react-native-sdk": [
      {
        "type": "emphasis",
        "description": "Unrendered emphasis (**bold** or *italic*)",
        "count": 1,
        "samples": [
          "* price. Defaults to 1</td>\n</tr>\n<tr>\n<td></td>\n<td>Required. Double. The price of the products purchased, and this can be negative. Note: revenue = quantity *"
        ],
        "url": "https://amplitude.com/docs/sdks/analytics/react-native/react-native-sdk"
      }
    ]
  },
  "skippedUrls": [
    "https://amplitude.com/docs/llms"
  ]
}