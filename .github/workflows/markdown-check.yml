name: Check for Unrendered Markdown

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  markdown-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: bcmath, ctype, exif, json, mbstring, openssl, pdo, tokenizer, xml, gd

    - name: Install PHP Dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install NPM Dependencies
      run: npm install

    - name: Build Assets
      run: npm run prod

    - name: Build Static Site
      run: APP_URL=${{ vars.APP_URL }} php please ssg:generate --workers=4

    - name: Start Local Server
      run: |
        cd storage/app/static
        python3 -m http.server 8000 &
        echo $! > server.pid
        sleep 5
      shell: bash

    - name: Run Markdown Crawler
      run: |
        node crawler.js \
          --base-url http://localhost:8000 \
          --sitemap-path /docs/sitemap-docs.xml \
          --output markdown-issues.json \
          --concurrency 5 \
          --ignore-file .crawlerignore \
          --verbose
      continue-on-error: true
      id: crawler

    - name: Stop Local Server
      run: |
        if [ -f storage/app/static/server.pid ]; then
          kill $(cat storage/app/static/server.pid) || true
          rm storage/app/static/server.pid
        fi
      shell: bash

    - name: Upload Markdown Issues Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: markdown-issues-report
        path: markdown-issues.json

    - name: Comment PR with Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = JSON.parse(fs.readFileSync('markdown-issues.json', 'utf8'));
            
            let comment = '## üîç Markdown Rendering Check\n\n';
            
            if (report.summary.totalIssues === 0) {
              comment += '‚úÖ **No unrendered markdown detected!**\n\n';
              comment += `- URLs crawled: ${report.summary.totalUrls}\n`;
              comment += `- Errors: ${report.summary.totalErrors}\n`;
            } else {
              comment += `‚ùå **Found ${report.summary.totalIssues} potential markdown rendering issues**\n\n`;
              comment += `- URLs crawled: ${report.summary.totalUrls}\n`;
              comment += `- URLs with issues: ${report.summary.urlsWithIssues}\n`;
              comment += `- Errors: ${report.summary.totalErrors}\n\n`;
              
              comment += '### Issues by Type:\n';
              report.summary.issuesByType.forEach(issue => {
                comment += `- **${issue.type}**: ${issue.count} occurrences (${issue.description})\n`;
              });
              
              comment += '\n### Sample Issues:\n';
              Object.keys(report.issuesByUrl).slice(0, 3).forEach(url => {
                comment += `\n**${url}**:\n`;
                report.issuesByUrl[url].forEach(issue => {
                  comment += `- ${issue.type}: ${issue.count} occurrences\n`;
                  if (issue.samples && issue.samples.length > 0) {
                    const sample = issue.samples[0].substring(0, 100);
                    comment += `  - Sample: \`${sample}${issue.samples[0].length > 100 ? '...' : ''}\`\n`;
                  }
                });
              });
              
              comment += '\nüìÑ Download the full report from the workflow artifacts.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read markdown issues report:', error.message);
          }

    # Slack Notifications
    - name: Send Slack Summary
      if: always() && (github.event_name == 'push' || github.event_name == 'schedule')
      continue-on-error: true
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": ":mag: Markdown Rendering Check Results",
            "attachments": [
              {
                "color": "${{ steps.crawler.outcome == 'success' && 'good' || 'danger' }}",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "${{ steps.crawler.outcome == 'success' && '‚úÖ No Markdown Issues Found' || '‚ùå Markdown Issues Detected' }}"
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Repository:*\n${{ github.repository }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Branch:*\n${{ github.ref_name }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Trigger:*\n${{ github.event_name }}"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                      }
                    ]
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Send Detailed Slack Report
      if: always() && steps.crawler.outcome == 'failure' && (github.event_name == 'push' || github.event_name == 'schedule')
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const https = require('https');
          
          try {
            const report = JSON.parse(fs.readFileSync('markdown-issues.json', 'utf8'));
            
            if (report.summary.totalIssues > 0) {
              let issuesList = '';
              report.summary.issuesByType.forEach(issue => {
                issuesList += `‚Ä¢ *${issue.type}*: ${issue.count} occurrences\n`;
              });
              
              let sampleIssues = '';
              Object.keys(report.issuesByUrl).slice(0, 3).forEach(url => {
                const shortUrl = url.replace('http://localhost:8000', '').substring(0, 50);
                sampleIssues += `\n*${shortUrl}*:\n`;
                report.issuesByUrl[url].forEach(issue => {
                  sampleIssues += `  ‚Ä¢ ${issue.type}: ${issue.count} occurrences\n`;
                });
              });
              
              const payload = {
                text: "üìã Detailed Markdown Issues Report",
                attachments: [
                  {
                    color: "danger",
                    blocks: [
                      {
                        type: "section",
                        text: {
                          type: "mrkdwn",
                          text: `*Summary:*\n‚Ä¢ URLs crawled: ${report.summary.totalUrls}\n‚Ä¢ URLs with issues: ${report.summary.urlsWithIssues}\n‚Ä¢ Total issues: ${report.summary.totalIssues}\n‚Ä¢ Errors: ${report.summary.totalErrors}`
                        }
                      },
                      {
                        type: "section",
                        text: {
                          type: "mrkdwn",
                          text: `*Issues by Type:*\n${issuesList}`
                        }
                      },
                      {
                        type: "section",
                        text: {
                          type: "mrkdwn",
                          text: `*Sample Issues:*${sampleIssues}`
                        }
                      },
                      {
                        type: "actions",
                        elements: [
                          {
                            type: "button",
                            text: {
                              type: "plain_text",
                              text: "View Full Report"
                            },
                            url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
                          }
                        ]
                      }
                    ]
                  }
                ]
              };
              
              const data = JSON.stringify(payload);
              const webhookUrl = process.env.SLACK_WEBHOOK_URL;
              
              if (!webhookUrl) {
                console.log('SLACK_WEBHOOK_URL not configured, skipping detailed report');
                return;
              }
              
              const url = new URL(webhookUrl);
              const options = {
                hostname: url.hostname,
                port: url.port || 443,
                path: url.pathname,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': data.length
                }
              };
              
              const req = https.request(options, (res) => {
                console.log(`Slack webhook response: ${res.statusCode}`);
              });
              
              req.on('error', (error) => {
                console.error('Error sending to Slack:', error);
              });
              
              req.write(data);
              req.end();
            }
          } catch (error) {
            console.log('Could not send detailed Slack report:', error.message);
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Fail if Issues Found
      if: steps.crawler.outcome == 'failure'
      run: |
        echo "‚ùå Markdown rendering issues detected. Check the report for details."
        exit 1 